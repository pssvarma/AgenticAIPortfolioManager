/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.agentic.portfoliomanager.api;

import com.agentic.portfoliomanager.model.Candle;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import com.agentic.portfoliomanager.model.Problem;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-04T16:27:30.013721700-07:00[America/Los_Angeles]")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/market/candles : Query OHLCV candles
     *
     * @param symbol  (required)
     * @param tf  (required)
     * @param from  (optional)
     * @param to  (optional)
     * @return Candle series (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "apiMarketCandlesGet",
        summary = "Query OHLCV candles",
        responses = {
            @ApiResponse(responseCode = "200", description = "Candle series", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Candle.class))),
                @Content(mediaType = "application/problem+json", array = @ArraySchema(schema = @Schema(implementation = Candle.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/market/candles",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<List<Candle>> apiMarketCandlesGet(
        @NotNull @Parameter(name = "symbol", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "symbol", required = true) String symbol,
        @NotNull @Parameter(name = "tf", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "tf", required = true) String tf,
        @Parameter(name = "from", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "from", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime from,
        @Parameter(name = "to", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "to", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime to
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"volume\" : 5.637376656633329, \"symbol\" : \"symbol\", \"venue\" : \"NASDAQ\", \"high\" : 6.027456183070403, \"tf\" : \"1d\", \"low\" : 1.4658129805029452, \"close\" : 5.962133916683182, \"open\" : 0.8008281904610115, \"ts\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"volume\" : 5.637376656633329, \"symbol\" : \"symbol\", \"venue\" : \"NASDAQ\", \"high\" : 6.027456183070403, \"tf\" : \"1d\", \"low\" : 1.4658129805029452, \"close\" : 5.962133916683182, \"open\" : 0.8008281904610115, \"ts\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/market/symbols : List supported symbols
     *
     * @return Symbols (status code 200)
     */
    @Operation(
        operationId = "apiMarketSymbolsGet",
        summary = "List supported symbols",
        responses = {
            @ApiResponse(responseCode = "200", description = "Symbols", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/market/symbols",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> apiMarketSymbolsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
